name: build-container
on:
  push:
    branches: [main]
    tags: [v*]

jobs:
  build:
    runs-on: watchedsky-backend-runners
    permissions:
      contents: read
    steps:
      - name: Install Tools
        shell: bash
        run: |
          # make manpage dir manually
          mkdir -p /usr/share/man/man1

          # update apt repo and install curl and an updated git for the checkout action
          # as dagger needs it
          sudo apt -y update && sudo apt -y install curl git jq
      - name: Checkout
        uses: actions/checkout@v4
      - name: Calculate Version
        id: get_version
        shell: bash
        run: |
          ref=$(echo "${EVENT_JSON}" | jq -r '.ref // ""')
          commit_hash=$(echo "${EVENT_JSON}" | jq -r '.head_commit.id // ""')

          tag=$(git tag --sort=-v:refname | head -n1)
          [[ -z "${tag}" ]] && tag="v0.0.0"
          suffix="-${commit_hash:0:8}"
          if [[ ${ref} = "refs/tags/*" ]]; then
            tag=$(basename ${ref})
            suffix=""
          fi

          echo "appVersion=${tag#v}${suffix}" >> ${GITHUB_OUTPUT}
        env:
          EVENT_JSON: ${{ toJSON(github.event) }}
      - name: Call Dagger Function to build and publish to private registry
        uses: dagger/dagger-for-github@v5
        with:
          version: "latest"
          verb: call
          # modify to use different function(s) as needed
          module: .
          args: >-
             build-and-publish --registry=$DOCKER_REGISTRY
             --username=$DOCKER_USERNAME --password=env:DOCKER_PASSWORD
             --source . --app-version=$APP_VERSION
          # assumes the Dagger Cloud token is in
          # a repository secret named DAGGER_CLOUD_TOKEN
          # set via the GitHub UI/CLI
          cloud-token: ${{ secrets.DAGGER_CLOUD_TOKEN }}
        env:
          APP_VERSION: ${{ steps.get_version.outputs.appVersion }}
          EVENT_JSON: ${{ toJSON(github.event) }}
          DOCKER_REGISTRY: registry.lab.verysmart.house
          DOCKER_USERNAME: ${{ secrets.HARBOR_REGISTRY_USERNAME }}
          # assumes the container registry password is in
          # a repository secret named REGISTRY_PASSWORD
          # set via the GitHub UI/CL
          DOCKER_PASSWORD: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}
